#! /usr/bin/env ruby
# command line interface
# usage:
# 1. dump whole db:
# $ mysql_dumper dump DBNAME --to SQL_FILE_PATH -u USERNAME -h HOST
#
# 2. dump schema:
# $ mysql_dumper dump_schema DBNAME --to SQL_FILE_PATH -u USERNAME -h HOST [--perserve t1,t2...]
#
# 3. load schema to db:
# $ mysql_dumper load DBNAME --from SQL_FILE_PATH -u USERNAME -h HOST

require 'optparse'
require "mysql_dumper"

class ArgumentSet
  attr_accessor :config, :action, :file, :preserve, :username, :error
  VALID_ACTIONS = [ "dump", "dump_schema", "load" ]
  def initialize
    @config = {}
    parser.parse! ARGV
    @action = ARGV[0]
    @config["database"] = ARGV[1]
    @error = ""
  end

  def parser
    @parser ||= OptionParser.new do |opts|
      opts.banner = <<-BANNER
Usage: mysql_dumper ACTION [options]

ACTIONS:
  dump:         dump whole database to file, including schema, data and stored procedures.
  dump_schema:  dump schema to file
  load:         load sql file and import it to db

      BANNER
      opts.on("-u", "--username USERNAME", "username to connect") do |username|
        @config["username"] = username
      end
      opts.on("-f", "--to FILENAME", "file path of sql") do |filename|
        @file = filename
      end
      opts.on("-f", "--from FILENAME", "file path of sql") do |filename|
        @file = filename
      end
      opts.on("-p", "--password PASSWORD", "password of db") do |pwd|
        @config["password"] = pwd
      end
      opts.on("-h", "--host HOST", "host for db") do |pwd|
        @config["host"] = host
      end
      opts.on("-t", "--preserve DBNAME1,DBNAME2...", Array, "tables to preserve") do |tables|
        @preserve = tables
      end
      opts.on("-h", "--help") do 
        puts opts
        exit
      end
    end
  end

  def valid?
    ensure_exists @config["username"], "username"
    ensure_exists @config["database"], "database"
    ensure_exists @file, "sql_file"
    validate_action

    @error == ""
  end

  def ensure_exists param, attr_name
    if ! param
      @error += "missing argument #{attr_name}\n"
    end
  end
  
  def validate_action
    if ! VALID_ACTIONS.include? @action
      @error += "invalid action: #{@action}"
    end
  end

  def show_help
    puts parser
  end

end

arguments = ArgumentSet.new

if arguments.valid?
  dumper = MysqlDumper.new(arguments.config)
  case arguments.action
  when "dump"
    dumper.dump_to(arguments.file)
  when "dump_schema"
    dumper.dump_schema_to(arguments.file, { :preserve => arguments.preserve })
  when "load"
    dumper.load_from(arguments.file)
  end
else
  puts arguments.error
  arguments.show_help
end
